<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('includes/head', { title: 'Post title' }) %>
    <link rel="stylesheet" href="/styles/base.css" />
    <link rel="stylesheet" href="/styles/forms.css" />
    <link rel="stylesheet" href="/styles/posts.css" />
    <script src="/scripts/comments.js" defer></script>
    <!-- This is how we add the comments.js file into post-detail.ejs file. -->
    <!-- We don't need to add "/public" in the src= -->
  </head>

  <body>
    <%- include('includes/header') %>
    <main id="post-detail">
      <h1><%= post.title %></h1>
      <section id="post-meta">
        <address>
          <a href="mailto:<%= post.author.email %>"><%= post.author.name %></a>
        </address>
        | <time datetime="<%= post.date %>"><%= post.humanReadableDate %></time>
      </section>
      <hr />
      <section>
        <p id="body"><%= post.body %></p>
      </section>

      <section id="comments">
        <!-- ============================================================================== -->
        <!-- if (!comments) { 
          <p>
            This post might have comments. You can load them if you want to view
            them.
          </p>
          <button
          id="load-comments-btn"
          class="btn btn-alt"
          data-postid=" post._id "
        >
          Load Comments
        </button>
        } else if (comments.length === 0) {
        <p>No comments found.</p>
        } else {
        <ol>
          for (const comment of comments) {
          <li>include('includes/comment-item', { comment: comment })</li>
          } 
        </ol>
        }  -->
        <!-- The above else ejs statements don't work now as we don't provide a comments
        key from the server side blog.js file. Instead now we're fetching data from the
        client side comments.js file. So the above EJS instructions doesn't do anything with
        the dynamically fetched comments.js data. So we should manually replace the content
        of that comment section with the data that we fetched from comments.js file. Which
        means that we wanna replace the <p> and the <button> tag from the data that we
        fetched from comments.js file when the load comments button is clicked. In order to
        do that, we wanna manipulate the DOM from comments.js file once the load comments 
        button is clicked. -->
        <!-- ============================================================================== -->

        <p>
          This post might have comments. You can load them if you want to view
          them.
        </p>

        <!-- <form action="/posts/post._id/comments" method="GET">
          <button class="btn btn-alt">Load Comments</button>
        </form> -->
        <button
          id="load-comments-btn"
          class="btn btn-alt"
          data-postid="<%= post._id %>"
        >
          Load Comments
        </button>
        <!-- Instead of registering a new route to the button using a form action url, We can add an
        event listener to the button and add some Ajax logic through the comments.js file. -->
        <!-- We need to add the posts id from a data- attribute to this button -->
        <!-- So then we can use that value inside the comments.js file. -->
      </section>

      <section id="comments-form">
        <h2>Leave a comment</h2>
        <!-- <form action="/posts/post._id/comments" method="POST"> -->
        <!-- We need the action and the method only if we want the browser to handle our request. -->
        <!-- It will cost an extra reload in our page -->
        <!-- But we need to handle the form submission by our own using ajax -->
        <!-- So we don't need action and method attributes. -->
        <!-- We can handle this form by giving and id to it. We can also use the id of this section and 
        then get access to this form through the querySelector. We'll use that method. -->
        <!-- Then after we can handle this from through the ajax code we write in comments.js file. -->
        <form data-postid="<%= post._id %>">
          <!-- this data-postid is used to access the id in comments.js -->
          <div class="form-control">
            <label for="title">Comment title</label>
            <input type="text" id="title" name="title" required />
          </div>
          <div class="form-control">
            <label for="text">Your comment</label>
            <textarea name="text" id="text" rows="3" required></textarea>
          </div>
          <button class="btn">Save Comment</button>
        </form>
      </section>
    </main>
  </body>
</html>
